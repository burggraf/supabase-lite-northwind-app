import jsPDF from 'jspdf'
import * as XLSX from 'xlsx'
import Papa from 'papaparse'

export interface ExportData {
  title: string
  headers: string[]
  data: any[]
  metadata?: {
    generatedBy?: string
    generatedAt?: Date
    description?: string
  }
}

/**
 * Export data to CSV format
 */
export function exportToCSV(exportData: ExportData): void {
  const { title, headers, data } = exportData
  
  // Prepare data for CSV
  const csvData = [
    headers,
    ...data.map(row => headers.map(header => {
      const value = row[header.toLowerCase().replace(/\s+/g, '_')]
      return value !== null && value !== undefined ? String(value) : ''
    }))
  ]

  // Convert to CSV string
  const csv = Papa.unparse(csvData)
  
  // Download file
  downloadFile(csv, `${title}.csv`, 'text/csv')
}

/**
 * Export data to Excel format
 */
export function exportToExcel(exportData: ExportData): void {
  const { title, headers, data, metadata } = exportData
  
  // Create workbook
  const workbook = XLSX.utils.book_new()
  
  // Prepare data with headers
  const worksheetData = [
    headers,
    ...data.map(row => headers.map(header => {
      const key = header.toLowerCase().replace(/\s+/g, '_')
      return row[key] !== null && row[key] !== undefined ? row[key] : ''
    }))
  ]
  
  // Create worksheet
  const worksheet = XLSX.utils.aoa_to_sheet(worksheetData)
  
  // Auto-size columns
  const columnWidths = headers.map(header => ({ width: Math.max(header.length, 15) }))
  worksheet['!cols'] = columnWidths
  
  // Add worksheet to workbook
  XLSX.utils.book_append_sheet(workbook, worksheet, 'Data')
  
  // Add metadata sheet if provided
  if (metadata) {
    const metadataData = [
      ['Report Title', title],
      ['Generated By', metadata.generatedBy || 'Northwind Business App'],
      ['Generated At', metadata.generatedAt?.toISOString() || new Date().toISOString()],
      ['Description', metadata.description || ''],
      ['Record Count', data.length.toString()]
    ]
    const metadataSheet = XLSX.utils.aoa_to_sheet(metadataData)
    XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Metadata')
  }
  
  // Download file
  XLSX.writeFile(workbook, `${title}.xlsx`)
}

/**
 * Export data to PDF format
 */
export function exportToPDF(exportData: ExportData): void {
  const { title, headers, data, metadata } = exportData
  
  // Create PDF document
  const pdf = new jsPDF('p', 'pt', 'a4')
  const pageWidth = pdf.internal.pageSize.getWidth()
  const pageHeight = pdf.internal.pageSize.getHeight()
  const margin = 40
  
  // Set font
  pdf.setFont('helvetica')
  
  // Add title
  pdf.setFontSize(18)
  pdf.setTextColor(40, 40, 40)
  pdf.text(title, margin, margin + 20)
  
  let yPosition = margin + 60
  
  // Add metadata
  if (metadata) {
    pdf.setFontSize(10)
    pdf.setTextColor(100, 100, 100)
    
    const metaText = [
      `Generated by: ${metadata.generatedBy || 'Northwind Business App'}`,
      `Generated at: ${metadata.generatedAt?.toLocaleString() || new Date().toLocaleString()}`,
      metadata.description ? `Description: ${metadata.description}` : '',
      `Records: ${data.length}`
    ].filter(Boolean)
    
    metaText.forEach(text => {
      pdf.text(text, margin, yPosition)
      yPosition += 15
    })
    
    yPosition += 20
  }
  
  // Calculate column widths
  const availableWidth = pageWidth - (margin * 2)
  const columnWidth = Math.min(availableWidth / headers.length, 120)
  
  // Add table headers
  pdf.setFontSize(10)
  pdf.setTextColor(40, 40, 40)
  pdf.setFillColor(240, 240, 240)
  
  let xPosition = margin
  headers.forEach(header => {
    pdf.rect(xPosition, yPosition - 15, columnWidth, 20, 'F')
    pdf.text(header.substring(0, 15), xPosition + 5, yPosition - 5)
    xPosition += columnWidth
  })
  
  yPosition += 10
  
  // Add table data
  pdf.setFontSize(9)
  pdf.setTextColor(60, 60, 60)
  
  data.forEach((row, index) => {
    // Check if we need a new page
    if (yPosition > pageHeight - margin - 50) {
      pdf.addPage()
      yPosition = margin + 20
    }
    
    xPosition = margin
    headers.forEach(header => {
      const key = header.toLowerCase().replace(/\s+/g, '_')
      const value = row[key] !== null && row[key] !== undefined ? String(row[key]) : ''
      const truncatedValue = value.substring(0, 20)
      
      pdf.text(truncatedValue, xPosition + 5, yPosition)
      xPosition += columnWidth
    })
    
    yPosition += 15
    
    // Add subtle row separator for even rows
    if (index % 2 === 1) {
      pdf.setFillColor(248, 248, 248)
      pdf.rect(margin, yPosition - 15, availableWidth, 15, 'F')
    }
  })
  
  // Add page numbers
  const totalPages = pdf.getNumberOfPages()
  for (let i = 1; i <= totalPages; i++) {
    pdf.setPage(i)
    pdf.setFontSize(8)
    pdf.setTextColor(150, 150, 150)
    pdf.text(`Page ${i} of ${totalPages}`, pageWidth - margin - 50, pageHeight - 20)
  }
  
  // Download file
  pdf.save(`${title}.pdf`)
}

/**
 * Format data for export based on common patterns
 */
export function formatDataForExport(data: any[], type: 'currency' | 'date' | 'number' | 'percentage' = 'number'): any[] {
  return data.map(row => {
    const formattedRow = { ...row }
    
    Object.keys(formattedRow).forEach(key => {
      const value = formattedRow[key]
      
      if (value === null || value === undefined) {
        formattedRow[key] = ''
        return
      }
      
      // Format based on key patterns
      if (key.includes('date') || key.includes('Date')) {
        formattedRow[key] = value instanceof Date ? value.toLocaleDateString() : value
      } else if (key.includes('price') || key.includes('amount') || key.includes('revenue') || key.includes('cost')) {
        formattedRow[key] = typeof value === 'number' ? `$${value.toFixed(2)}` : value
      } else if (key.includes('percentage') || key.includes('rate')) {
        formattedRow[key] = typeof value === 'number' ? `${value.toFixed(1)}%` : value
      } else if (typeof value === 'number' && !Number.isInteger(value)) {
        formattedRow[key] = value.toFixed(2)
      }
    })
    
    return formattedRow
  })
}

/**
 * Prepare export data from analytics results
 */
export function prepareAnalyticsExport(
  title: string,
  data: any[],
  columns: { key: string; header: string }[],
  description?: string
): ExportData {
  return {
    title,
    headers: columns.map(col => col.header),
    data: formatDataForExport(data),
    metadata: {
      generatedBy: 'Northwind Business Analytics',
      generatedAt: new Date(),
      description
    }
  }
}

/**
 * Download file helper
 */
function downloadFile(content: string, filename: string, contentType: string): void {
  const blob = new Blob([content], { type: contentType })
  const url = window.URL.createObjectURL(blob)
  const link = document.createElement('a')
  link.href = url
  link.download = filename
  document.body.appendChild(link)
  link.click()
  document.body.removeChild(link)
  window.URL.revokeObjectURL(url)
}

/**
 * Export multiple formats at once
 */
export function exportAllFormats(exportData: ExportData): void {
  try {
    exportToCSV(exportData)
    exportToExcel(exportData)
    exportToPDF(exportData)
  } catch (error) {
    console.error('Failed to export data:', error)
    throw new Error('Export failed. Please try again.')
  }
}